# input and store number
	IN
	STO	f
start	STO	input
	OUT

# check if one
	SUB	one
	BRZ	halt

# reset count to zero
	LDA	zero
	STO	count

# divide by two
divide	LDA	count
	ADD	one
	STO	count
	LDA	f
	SUB	two
	STO	f
	BRP	divide
# Subtract one from count
	LDA	count
	SUB	one
	STO	f

# check if input is odd or even
	LDA	input
# subtract two until either zero or negative
loop	SUB	two
	BRZ	even
	BRP	loop

# if odd number
	LDA	input
# check if over 667
	SUB	sss
	BRP	over
# multiply by three and add two
	LDA	f
	ADD	f
	ADD	f
	ADD	two
	STO	f
	BR	start

# if even number
even	LDA	f
	BR	start

# overflow case
over	LDA	zero
	OUT

# overflow
halt	HLT

# data initalisation
input	DAT	0
f	DAT	0
one	DAT	1
two	DAT	2
count	DAT	0
zero	DAT	0
sss	DAT	667